atestdaily_20days <- na.omit(rollapplyr(total5mintimeseries, 1617, function(x) realCov(x, correlation = T)[2,1], by.column = FALSE, align="right", by=77))
indexation_lel <- 250 - nrow(atestdaily_20days) +1
correlation20daysdaily <- ggplot() + geom_line(aes(x=index(re_merged)[indexation_lel:250], y=atestdaily_20days), col="#56B4E9") +
xlab("Dates") + ylab("Correlation")
newplot1 <- grid.arrange(plot1, correlation20daysdaily, nrow=2)
portfoliovol_monthly_realcov
length(atestdaily_20days)
atestdaily_20days
#---------------------------------------------preavgbpcov_15min ------------------------------------------
total15mintimeseries <- do.call.rbind(cts15minmerged)
monthly_split_15min <- split(total15mintimeseries, "months")
riskparity_2dim_preavgbpcov <- function(matrix, risktarget){
bonds <- matrix[,1]
stocks <- matrix[,2]
w_1 <- sqrt(var(bonds))^-1 / (sqrt(var(stocks))^-1 + sqrt(var(bonds))^-1)
w_2 <- sqrt(var(stocks))^-1 / (sqrt(var(stocks))^-1 + sqrt(var(bonds))^-1)
w <- matrix(c(w_1, w_2), ncol=1, nrow=2) #dimnames = list(c(), c("Bond", "Stock"))
portrisk <- sqrt(t(w) %*% preavBPCOV(matrix, preaveraging = T, rescaled = T, theta = 1) %*% w)
alpha <- risktarget / portrisk
w_new <- w %*% alpha
return(w_new)
}
total15mintimeseries[50,]
total15mintimeseries[300,]
4*6.5
preav_appen <- na.omit(rollapplyr(total15mintimeseries, 300, function(x) riskparity_2dim_anothertest(x), by.column=FALSE, align = "right", by =25))
riskparity_2dim_preavgbpcov <- function(matrix, risktarget){
bonds <- matrix[,1]
stocks <- matrix[,2]
w_1 <- sqrt(var(bonds))^-1 / (sqrt(var(stocks))^-1 + sqrt(var(bonds))^-1)
w_2 <- sqrt(var(stocks))^-1 / (sqrt(var(stocks))^-1 + sqrt(var(bonds))^-1)
w <- matrix(c(w_1, w_2), ncol=1, nrow=2) #dimnames = list(c(), c("Bond", "Stock"))
portrisk <- sqrt(t(w) %*% preavBPCOV(matrix, preaveraging = T, rescaled = T, theta = 1) %*% w)
alpha <- risktarget / portrisk
w_new <- w %*% alpha
return(w_new)
}
preav_appen <- na.omit(rollapplyr(total15mintimeseries, 300, function(x) riskparity_2dim_preavgbpcov(x), by.column=FALSE, align = "right", by =25))
preav_appen <- na.omit(rollapplyr(total15mintimeseries, 300, function(x) riskparity_2dim_preavgbpcov(x, 0.1), by.column=FALSE, align = "right", by =25))
preav_appen
total5mintimeseries[â€¢1617]
total5mintimeseries[1617]
total5mintimeseries[1000]
total5mintimeseries[928]
total5mintimeseries[922]
total5mintimeseries[923]
total5mintimeseries[924]
#it's 231 now
rollingproxy_preavbp <- na.omit(rollapplyr(total5mintimeseries, 924,  function(x) realCov(x), by.column=F, align = "right", by = 77))
#it's 231 now
rollingproxy_preavbp <- na.omit(rollapplyr(total5mintimeseries, 924,  function(x) realCov(x), by.column=F, align = "right", by = 77))
rolling5mincovar_preav <- array(dim=c(2,2,227))
for (i in 1:227){
rolling5mincovar_preav[,,i] <- matrix(rollingproxy_preavbp[i,], ncol=2, nrow=2, byrow = T)
}
rolling5mincovar_preav
ength(preav_appen)
length(preav_appen)
4*6.5
preav_appen <- na.omit(rollapplyr(total15mintimeseries, 300, function(x) riskparity_2dim_preavgbpcov(x, 0.1), by.column=FALSE, align = "right", by =26))
nrow(preav_appen)
nrow(preav_appen)
#it's 231 now
rollingproxy_preavbp <- na.omit(rollapplyr(total5mintimeseries, 924,  function(x) realCov(x), by.column=F, align = "right", by = 77))
nrow(rollingproxy_preavbp)
preav_appen <- na.omit(rollapplyr(total15mintimeseries, 300, function(x) riskparity_2dim_preavgbpcov(x, 0.1), by.column=FALSE, align = "right", by =26))
nrow(preav_appen)
#it's 231 now
rollingproxy_preavbp <- na.omit(rollapplyr(total5mintimeseries, 924,  function(x) realCov(x), by.column=F, align = "right", by = 78))
nrow(rollingproxy_preavbp)
total5mintimeseries[1003]
total5mintimeseries[1000]
total5mintimeseries[1001]
#it's 231 now
rollingproxy_preavbp <- na.omit(rollapplyr(total5mintimeseries, 1001,  function(x) realCov(x), by.column=F, align = "right", by = 78))
nrow(rollingproxy_preavbp)
#it's 231 now
rollingproxy_preavbp <- na.omit(rollapplyr(total5mintimeseries, 1617,  function(x) realCov(x), by.column=F, align = "right", by = 78))
nrow(rollingproxy_preavbp)
#it's 231 now
rollingproxy_preavbp <- na.omit(rollapplyr(total5mintimeseries, 1617,  function(x) realCov(x), by.column=F, align = "right", by = 77))
nrow(rollingproxy_preavbp)
rolling5mincovar_preav <- array(dim=c(2,2,227))
for (i in 1:227){
rolling5mincovar_preav[,,i] <- matrix(rollingproxy_preavbp[i,], ncol=2, nrow=2, byrow = T)
}
portfoliovol_3weeks_realcov_preavbp <- vector()
for(i in 1:227){
portfoliovol_3weeks_realcov_preavbp[i] <- sqrt( t(as.matrix(preav_appen[i, ])) %*% as.matrix(rolling5mincovar_preav[,,i]) %*% as.matrix(preav_appen[i, ]))
}
for(i in 1:227){
portfoliovol_3weeks_realcov_preavbp[i] <- sqrt( t(as.matrix(preav_appen[i, ])) %*% rolling5mincovar_preav[,,i] %*% as.matrix(preav_appen[i, ]))
}
preav_appen
rolling5mincovar_preav
for(i in 1:227){
portfoliovol_3weeks_realcov_preavbp[i] <- sqrt( t(as.matrix(preav_appen[i, ])) %*% as.matrix(rolling5mincovar_preav[,,i]) %*% as.matrix(preav_appen[i, ]))
}
preav_appen <- as.matrix(preav_appen)
#it's 231 now
rollingproxy_preavbp <- na.omit(rollapplyr(total5mintimeseries, 1617,  function(x) realCov(x), by.column=F, align = "right", by = 77))
rolling5mincovar_preav <- array(dim=c(2,2,227))
for (i in 1:227){
rolling5mincovar_preav[,,i] <- matrix(rollingproxy_preavbp[i,], ncol=2, nrow=2, byrow = T)
}
portfoliovol_3weeks_realcov_preavbp <- vector()
for(i in 1:227){
portfoliovol_3weeks_realcov_preavbp[i] <- sqrt( t(as.matrix(preav_appen[i, ])) %*% as.matrix(rolling5mincovar_preav[,,i]) %*% as.matrix(preav_appen[i, ]))
}
portfoliovol_monthly_realcov_preavbp <- data.frame(portfoliovol_monthly_realcov_preavbp)
portfoliovol_3weeks_realcov_preavbp <- data.frame(portfoliovol_3weeks_realcov_preavbp)
ggplot() + geom_line(aes(x=1:227, y= portfoliovol_3weeks_realcov_preavbp[,1])) +
geom_hline(aes(yintercept=0.1))
ggplot() + geom_line(aes(x=index(re_merged)[23:250], y= portfoliovol_3weeks_realcov_preavbp[,1]*100)) +
geom_hline(aes(yintercept=10))
ggplot() + geom_line(aes(x=index(re_merged)[24:250], y= portfoliovol_3weeks_realcov_preavbp[,1]*100)) +
geom_hline(aes(yintercept=10))
ggplot() + geom_line(aes(x=index(re_merged)[24:250], y= portfoliovol_3weeks_realcov_preavbp[,1]*100*0.95)) +
geom_hline(aes(yintercept=10))
ggplot() + geom_line(aes(x=index(re_merged)[24:250], y= portfoliovol_3weeks_realcov_preavbp[,1]*100*0.95)) +
geom_hline(aes(yintercept=10)) + xlab("Dates") + ylab("Portfolio volatility (%)")
ggplot() + geom_line(aes(x=index(re_merged)[24:250], y= portfoliovol_3weeks_realcov_preavbp[,1]*100*0.95, col="BPCov*_15min")) +
geom_hline(aes(yintercept=10)) + xlab("Dates") + ylab("Portfolio volatility (%)")
ggplot() + geom_line(aes(x=index(re_merged)[24:250], y= portfoliovol_3weeks_realcov_preavbp[,1]*100*0.95, col="BPCov* 15min")) +
geom_hline(aes(yintercept=10)) + xlab("Dates") + ylab("Portfolio volatility (%)") +
theme(plot.title = element_text(hjust = 0.5), legend.background = element_rect(fill="lightblue", size=0.5, linetype="solid"),
legend.position = c(0.2, 0.9), legend.title = element_blank())
ggplot() + geom_line(aes(x=index(re_merged)[24:250], y= portfoliovol_3weeks_realcov_preavbp[,1]*100*0.95, col="BPCov* 15min")) +
geom_hline(aes(yintercept=10)) + xlab("Dates") + ylab("Portfolio volatility (%)") +
theme(plot.title = element_text(hjust = 0.5), legend.background = element_rect(fill="lightblue", size=0.5, linetype="solid"),
legend.position = c(0.2, 0.1), legend.title = element_blank())
ggplot() + geom_line(aes(x=index(re_merged)[24:250], y= portfoliovol_3weeks_realcov_preavbp[,1]*100*0.95, col="BPCov* 15min")) +
geom_hline(aes(yintercept=10)) + xlab("Dates") + ylab("Portfolio volatility (%)") +
theme(plot.title = element_text(hjust = 0.5), legend.background = element_rect(fill="lightblue", size=0.5, linetype="solid"),
legend.position = c(0.9, 0.9), legend.title = element_blank())
ggplot() + geom_line(aes(x=index(re_merged)[24:250], y= portfoliovol_3weeks_realcov_preavbp[,1]*100*0.95, col="BPCov* 15min")) +
geom_hline(aes(yintercept=10)) + xlab("Dates") + ylab("Portfolio volatility (%)") +
theme(plot.title = element_text(hjust = 0.5), legend.background = element_rect(fill="lightblue", size=0.5, linetype="solid"),
legend.position = c(0.8, 0.9), legend.title = element_blank())
ggplot() + geom_line(aes(x=index(re_merged)[24:250], y= portfoliovol_3weeks_realcov_preavbp[,1]*100*0.95, col="BPCov* 15min")) +
geom_hline(aes(yintercept=10)) + xlab("Dates") + ylab("Portfolio volatility (%)") +
theme(plot.title = element_text(hjust = 0.5), legend.background = element_rect(fill="lightblue", size=0.5, linetype="solid"),
legend.position = c(0.8, 0.9), legend.title = element_blank()) + ggtitle("Realized portfolio volatilit, rolling 3 weeks BPCov*")
ggplot() + geom_line(aes(x=index(re_merged)[24:250], y= portfoliovol_3weeks_realcov_preavbp[,1]*100*0.95, col="BPCov* 15min")) +
geom_hline(aes(yintercept=10)) + xlab("Dates") + ylab("Portfolio volatility (%)") +
theme(plot.title = element_text(hjust = 0.5), legend.background = element_rect(fill="lightblue", size=0.5, linetype="solid"),
legend.position = c(0.8, 0.9), legend.title = element_blank()) + ggtitle("Realized portfolio volatiliy, rolling 3 weeks BPCov*")
load("H:/Dropbox/Uni - Mathematics and Economics/ATP topic course/Rcode/Jumpproportionestimates.RData")
BPcov_5sec_error
for ( i in 1:249){
Rcov_5sec_error[i] <- QLIKE(realCov(cts5minmerged[[i+1]]), realCov(cts5secmerged[[i]]))
#Rcov_1sec_error[i] <- QLIKE(realCov(cts5minmerged[[i+1]]), realCov(cts1secmerged[[i]]))
BPcov_5sec_error[i] <- QLIKE(preavBPCOV(cts5minmerged[[i+1]], preaveraging = FALSE, correlation = FALSE, rescaled = F, theta = 0.8), preavBPCOV(cts5secmerged[[i]], preaveraging = FALSE, correlation = FALSE, rescaled = TRUE, theta = 0.8))
#BPcov_1sec_error[i] <- QLIKE(preavBPCOV(cts5minmerged[[i+1]], preaveraging = FALSE, correlation = FALSE, rescaled = TRUE, theta = 0.8), preavBPCOV(cts1secmerged[[i]], preaveraging = FALSE, correlation = FALSE, rescaled = TRUE, theta = 0.8))
thrcov_5sec_error[i] <- QLIKE(preavthrCOV(cts5minmerged[[i+1]], preaveraging = FALSE, theta = 1), preavthrCOV(cts5secmerged[[i]], preaveraging = FALSE, theta = 1))
#thrcov_1sec_error[i] <- QLIKE(realCov(cts5minmerged[[i+1]]), preavthrCOV(cts1secmerged[[i]], preaveraging = FALSE, theta = 1))
#preavthrCOV(cts1secmerged[[i]], preaveraging = FALSE, theta = 1)
print(sprintf("iteration number: %s", i))
#Rcov_5sec_error_uni_TLT[i] <- QLIKEuni(realCov(cts5minmerged[[i+1]])[1], realCov(cts5secmerged[[i]])[1])
#Rcov_1sec_error_uni_TLT[i] <- QLIKEuni(realCov(cts5minmerged[[i+1]])[1], realCov(cts1secmerged[[i]])[1])
#Rcov_5sec_error_uni_SPY[i] <- QLIKEuni(realCov(cts5minmerged[[i+1]])[2], realCov(cts5secmerged[[i]])[2])
#Rcov_1sec_error_uni_SPY[i] <- QLIKEuni(realCov(cts5minmerged[[i+1]])[2], realCov(cts1secmerged[[i]])[2])
}
library(matlib)
library(xts)
for ( i in 1:249){
Rcov_5sec_error[i] <- QLIKE(realCov(cts5minmerged[[i+1]]), realCov(cts5secmerged[[i]]))
#Rcov_1sec_error[i] <- QLIKE(realCov(cts5minmerged[[i+1]]), realCov(cts1secmerged[[i]]))
BPcov_5sec_error[i] <- QLIKE(preavBPCOV(cts5minmerged[[i+1]], preaveraging = FALSE, correlation = FALSE, rescaled = F, theta = 0.8), preavBPCOV(cts5secmerged[[i]], preaveraging = FALSE, correlation = FALSE, rescaled = TRUE, theta = 0.8))
#BPcov_1sec_error[i] <- QLIKE(preavBPCOV(cts5minmerged[[i+1]], preaveraging = FALSE, correlation = FALSE, rescaled = TRUE, theta = 0.8), preavBPCOV(cts1secmerged[[i]], preaveraging = FALSE, correlation = FALSE, rescaled = TRUE, theta = 0.8))
thrcov_5sec_error[i] <- QLIKE(preavthrCOV(cts5minmerged[[i+1]], preaveraging = FALSE, theta = 1), preavthrCOV(cts5secmerged[[i]], preaveraging = FALSE, theta = 1))
#thrcov_1sec_error[i] <- QLIKE(realCov(cts5minmerged[[i+1]]), preavthrCOV(cts1secmerged[[i]], preaveraging = FALSE, theta = 1))
#preavthrCOV(cts1secmerged[[i]], preaveraging = FALSE, theta = 1)
print(sprintf("iteration number: %s", i))
#Rcov_5sec_error_uni_TLT[i] <- QLIKEuni(realCov(cts5minmerged[[i+1]])[1], realCov(cts5secmerged[[i]])[1])
#Rcov_1sec_error_uni_TLT[i] <- QLIKEuni(realCov(cts5minmerged[[i+1]])[1], realCov(cts1secmerged[[i]])[1])
#Rcov_5sec_error_uni_SPY[i] <- QLIKEuni(realCov(cts5minmerged[[i+1]])[2], realCov(cts5secmerged[[i]])[2])
#Rcov_1sec_error_uni_SPY[i] <- QLIKEuni(realCov(cts5minmerged[[i+1]])[2], realCov(cts1secmerged[[i]])[2])
}
for ( i in 1:249){
Rcov_5sec_error[i] <- QLIKE(realCov(cts5minmerged[[i+1]]), realCov(cts5secmerged[[i]]))
#Rcov_1sec_error[i] <- QLIKE(realCov(cts5minmerged[[i+1]]), realCov(cts1secmerged[[i]]))
BPcov_5sec_error[i] <- QLIKE(preavBPCOV(cts5minmerged[[i+1]], preaveraging = FALSE, correlation = FALSE, rescaled = F, theta = 0.8), preavBPCOV(cts5secmerged[[i]], preaveraging = FALSE, correlation = FALSE, rescaled = F, theta = 0.8))
#BPcov_1sec_error[i] <- QLIKE(preavBPCOV(cts5minmerged[[i+1]], preaveraging = FALSE, correlation = FALSE, rescaled = TRUE, theta = 0.8), preavBPCOV(cts1secmerged[[i]], preaveraging = FALSE, correlation = FALSE, rescaled = TRUE, theta = 0.8))
thrcov_5sec_error[i] <- QLIKE(preavthrCOV(cts5minmerged[[i+1]], preaveraging = FALSE, theta = 1), preavthrCOV(cts5secmerged[[i]], preaveraging = FALSE, theta = 1))
#thrcov_1sec_error[i] <- QLIKE(realCov(cts5minmerged[[i+1]]), preavthrCOV(cts1secmerged[[i]], preaveraging = FALSE, theta = 1))
#preavthrCOV(cts1secmerged[[i]], preaveraging = FALSE, theta = 1)
print(sprintf("iteration number: %s", i))
#Rcov_5sec_error_uni_TLT[i] <- QLIKEuni(realCov(cts5minmerged[[i+1]])[1], realCov(cts5secmerged[[i]])[1])
#Rcov_1sec_error_uni_TLT[i] <- QLIKEuni(realCov(cts5minmerged[[i+1]])[1], realCov(cts1secmerged[[i]])[1])
#Rcov_5sec_error_uni_SPY[i] <- QLIKEuni(realCov(cts5minmerged[[i+1]])[2], realCov(cts5secmerged[[i]])[2])
#Rcov_1sec_error_uni_SPY[i] <- QLIKEuni(realCov(cts5minmerged[[i+1]])[2], realCov(cts1secmerged[[i]])[2])
}
for (i in 1:249){
#preavgBPcov_1sec_error[i] <- QLIKE(preavBPCOV(cts5minmerged[[i+1]], FALSE, FALSE,F), preavBPCOV(cts1secmerged[[i]], T, F, T,theta = 1))
preavgBPcov_5sec_error[i] <- QLIKE(preavBPCOV(cts5minmerged[[i+1]], FALSE, FALSE,F), preavBPCOV(cts5secmerged[[i]], T, F, T ,theta = 1))
preavgRcov_5sec_error[i] <- QLIKE(realCov(cts5minmerged[[i+1]]), preavCov(cts5secmerged[[i]], rescaled = TRUE, biascorrected = TRUE, correlation = FALSE ,theta = 1))
#preavgRcov_1sec_error[i] <- QLIKE(realCov(cts5minmerged[[i+1]]), preavCov(cts1secmerged[[i]], rescaled = TRUE, biascorrected = TRUE, correlation = FALSE ,theta = 1))
print(sprintf("iteration number: %s", i))
}
Rcov_5sec_error
five_sec_estimates_all <- list(Rcov_5sec_error,
BPcov_5sec_error,
thrcov_5sec_error,
preavgBPcov_5sec_error,
preavgRcov_5sec_error
)
names(five_sec_estimates_all) <- c("RCov 5sec", "BPCov 5sec", "ThreshCov 5sec", "BPCov* 5sec", "MRC 5sec")
saveRDS(five_sec_estimates_all, "five_sec_estimates_all.rds")
install.packages("MCS")
load("H:/Dropbox/Uni - Mathematics and Economics/ATP topic course/Rcode/Forintroplots.RData")
library(ggplot2)
ggplot(data = testset, aes(x = Position, y=value)) + geom_bar( aes(fill = variable), stat = "identity", position = "dodge") +
ggtitle("Avg. loss for the estimators under different sampling schemes") +
xlab("Sampling Scheme") + ylab("Avg. MQLIKE (Steins distance)") + theme(plot.title = element_text(hjust = 0.5, face = "bold"))
#Use this when constructing the table. It should give an overview of the average loss function for each estimator.
totableset <- data.frame(realized = c("daily", "15min", "5min", "1min", "5sec", "1sec","daily","15min", "5min", "1min", "5sec", "1sec","daily","15min", "5min", "1min", "5sec", "1sec","daily","15min", "5min", "1min", "5sec", "1sec","daily" ,"15min", "5min", "1min", "5sec", "1sec"),
RCov = c(Rcov_daily_QLIKE, Rcov_15min_error, Rcov_5min_error, Rcov_1min_error, Rcov_5sec_error, Rcov_1sec_error), BPCov = c(BPcov_daily_QLIKE,BPcov_15min_error_corrected, BPcov_5min_error, BPcov_1min_error_corrected, BPcov_5sec_error, BPcov_1sec_error),
ThrCov = c(thrcov_daily_QLIKE, thrcov_15min_error, thrcov_5min_error, thrcov_1min_error, thrcov_5sec_error, thrcov_1sec_error), MRC = c(0, preavgRcov_15min_error, preavgRcov_5min_error, preavgRcov_1min_error, preavgRcov_5sec_error, preavgRcov_1sec_error),
BPCov* = c(0, preavgBPcov_15min_error, preavgBPcov_5min_error, preavgBPcov_1min_error,preavgBPcov_5sec_error ,preavgBPcov_1sec_error))[1:6, ]
testset <- data.frame(realized = c("daily", "15min", "5min", "1min", "5sec", "1sec","daily","15min", "5min", "1min", "5sec", "1sec","daily","15min", "5min", "1min", "5sec", "1sec","daily","15min", "5min", "1min", "5sec", "1sec","daily" ,"15min", "5min", "1min", "5sec", "1sec"),
RCov = c(Rcov_daily_QLIKE/4.61276, Rcov_15min_error, Rcov_5min_error, Rcov_1min_error, Rcov_5sec_error, Rcov_1sec_error), BPCov = c(BPcov_daily_QLIKE/58.1044,BPcov_15min_error_corrected, BPcov_5min_error, BPcov_1min_error_corrected, BPcov_5sec_error, BPcov_1sec_error/1.08135),
ThreshCov = c(thrcov_daily_QLIKE/6.35412, thrcov_15min_error, thrcov_5min_error, thrcov_1min_error, thrcov_5sec_error, thrcov_1sec_error/3.08), MRC = c(0, preavgRcov_15min_error, preavgRcov_5min_error, preavgRcov_1min_error, preavgRcov_5sec_error, preavgRcov_1sec_error),
preavBPCov = c(0, preavgBPcov_15min_error, preavgBPcov_5min_error, preavgBPcov_1min_error,preavgBPcov_5sec_error ,preavgBPcov_1sec_error))
ggplot(data = testset, aes(x = Position, y=value)) + geom_bar( aes(fill = variable), stat = "identity", position = "dodge") +
ggtitle("Avg. loss for the estimators under different sampling schemes") +
xlab("Sampling Scheme") + ylab("Avg. MQLIKE (Steins distance)") + theme(plot.title = element_text(hjust = 0.5, face = "bold"))
testset <- data.frame(realized = c("daily", "15min", "5min", "1min", "5sec", "1sec","daily","15min", "5min", "1min", "5sec", "1sec","daily","15min", "5min", "1min", "5sec", "1sec","daily","15min", "5min", "1min", "5sec", "1sec","daily" ,"15min", "5min", "1min", "5sec", "1sec"),
RCov = c(Rcov_daily_QLIKE/4.61276, Rcov_15min_error, Rcov_5min_error, Rcov_1min_error, Rcov_5sec_error, Rcov_1sec_error), BPCov = c(BPcov_daily_QLIKE/58.1044,BPcov_15min_error_corrected, BPcov_5min_error, BPcov_1min_error_corrected, BPcov_5sec_error, BPcov_1sec_error/1.08135),
ThreshCov = c(thrcov_daily_QLIKE/6.35412, thrcov_15min_error, thrcov_5min_error, thrcov_1min_error, thrcov_5sec_error, thrcov_1sec_error/3.08), MRC = c(0, preavgRcov_15min_error, preavgRcov_5min_error, preavgRcov_1min_error, preavgRcov_5sec_error, preavgRcov_1sec_error),
preavBPCov = c(0, preavgBPcov_15min_error, preavgBPcov_5min_error, preavgBPcov_1min_error,preavgBPcov_5sec_error ,preavgBPcov_1sec_error))
#Use this when constructing the table. It should give an overview of the average loss function for each estimator.
totableset <- data.frame(realized = c("daily", "15min", "5min", "1min", "5sec", "1sec","daily","15min", "5min", "1min", "5sec", "1sec","daily","15min", "5min", "1min", "5sec", "1sec","daily","15min", "5min", "1min", "5sec", "1sec","daily" ,"15min", "5min", "1min", "5sec", "1sec"),
RCov = c(Rcov_daily_QLIKE, Rcov_15min_error, Rcov_5min_error, Rcov_1min_error, Rcov_5sec_error, Rcov_1sec_error), BPCov = c(BPcov_daily_QLIKE,BPcov_15min_error_corrected, BPcov_5min_error, BPcov_1min_error_corrected, BPcov_5sec_error, BPcov_1sec_error),
ThreshCov = c(thrcov_daily_QLIKE, thrcov_15min_error, thrcov_5min_error, thrcov_1min_error, thrcov_5sec_error, thrcov_1sec_error), MRC = c(0, preavgRcov_15min_error, preavgRcov_5min_error, preavgRcov_1min_error, preavgRcov_5sec_error, preavgRcov_1sec_error),
preavBPCov = c(0, preavgBPcov_15min_error, preavgBPcov_5min_error, preavgBPcov_1min_error,preavgBPcov_5sec_error ,preavgBPcov_1sec_error))[1:6, ]
library(reshape2)
testset <- melt(testset, id.vars = "realized")
Position <- factor(testset$realized, level = c("daily", "15min", "5min", "1min", "5sec", "1sec"))
ggplot(data = testset, aes(x = Position, y=value)) + geom_bar( aes(fill = variable), stat = "identity", position = "dodge") +
ggtitle("Avg. loss for the estimators under different sampling schemes") +
xlab("Sampling Scheme") + ylab("Avg. MQLIKE (Steins distance)") + theme(plot.title = element_text(hjust = 0.5, face = "bold"))
install.packages("invLT")
install.packages("fOptions")
install.packages("fAsianOptions")
install.packages("plotly")
install.packages("MFTSR", repos="http://R-Forge.R-project.org")
getAnywhere(EWMAVol)
getAnywhere(ewmaVol)
library(MFTSR)
getAnywhere(ewmaVol)
setwd('C:/Users/Emil/Desktop/Correlation check')
#TLT <- read.csv('daily_TLT.csv', header = T)
#SPY <- read.csv('daily_SPY.csv', header = T)
#TIP <- read.csv('daily_TIP.csv', header = T)
#LQD2 <- read.csv('daily_LQD.csv', header = T)
#Functions:
library(matlib)
realCov <- function(matrix, correlation = FALSE){
# Realized Covariance estimator for 1 day.
#
# Args:
#
#   matrix: A matrix of returns. Nxk
#
#	  N: number of intraday returns, k: number of asset dimension, T: number of days.
realcovariance <- matrix()
realcovariance <- t(matrix) %*% (matrix)
if(correlation){
d <- sqrt(diag(realcovariance))
d <- diag(d, ncol(realcovariance), ncol(realcovariance))
corr <- inv(d) %*% realcovariance %*% inv(d)
return(corr)
}
return( realcovariance )
}
#half-life: A 1 year estimation window with a 3 month half-life indicate that half.life = 1/4, maybe?
ewma.filter <- function(x, half.life, correlation = F, lambda = NULL){
iT <- nrow(x)
covar <- array(0L, dim = c(ncol(x),ncol(x), iT))
#unconditional covariance for first month.
covar[,,1] <- cov(x[1:100, ])
#calculation for half-life: lmd^t = 0.5 (half-life def) <=> t = ln(0.5)/ln(lmd) <=> lmd = exp(ln(0.5)/t)
if(is.null(lambda)){
lambda <- exp(log(0.5)/half.life)
}
print(sprintf("Lambda: %s", lambda))
half.life <- log(0.5)/log(lambda)
print(sprintf("half life: %s", half.life))
for(i in 2:iT){
covar[,,i] <-  lambda * covar[,,i-1] + (1-lambda) * t(x[i-1,])%*%x[i-1,]
}
if(correlation){
corr <- array(0L, dim = c(ncol(x),ncol(x), iT))
#corr[,,1] <- cor(x[1:100, ])
for(i in 1:iT){
d <- sqrt(diag(covar[,,i]))
d <- diag(d, ncol(covar), ncol(covar))
corr[,,i] <- inv(d) %*% covar[,,i] %*% inv(d)
}
return(corr)
}
return(covar)
}
ewma.filter2006 <- function(data, correlation = F, tau1 = NULL, rho = NULL){
#Reference values found in RiskMetrics 2006:
#Rho and tau1 controls the half-life construction in the 1993 model.
#set Rho =1 and vary tau1 to vary the half-life.
if(is.null(tau1)){
tau1 <- 4
}
if(is.null(rho)){
rho <- sqrt(2)
}
tau0 <- 1560
taumax <- 512
if(is.null(tau1) && is.null(rho)){
kmax   <- round(log(taumax/tau1)/log(rho))
}
else{kmax <- 14 }
#The one business day horizon at which
#the data are available is denoted by dt.
dt <- 1
tau <- numeric(kmax)
mu <- numeric(kmax)
iT <- nrow(data)
vol <- array(0L, dim = c(ncol(data), ncol(data), iT))
volk <- list()
weights <- numeric(kmax)
for(k in 1:kmax){
#now it is initialized using sample covariance
vol[,,1] <- cov(data[1:100, ])
tau[k] <- tau1 * rho^(k-1)
mu[k] <- exp(-dt/tau[k])
weights[k] <- 1-log(tau[k]/tau0)
#Calculate recursion of kth EWMA.
#need to initialize the vol formula. He initializes it using a backcast??
for(t in 2:iT){
vol[,,t] <- mu[k] * vol[,,t-1] + (1 - mu[k]) *  t(data[t-1,])%*%data[t-1, ]
}
#saves kth recursion in list.
volk[[k]] <- vol
}
#we pre-calculated the weights and made them sum to 1 by normalizing by the sum of the weights:
weigths <- weights / sum(weights)
#efficient vol is now a weighted sum of the k EWMA:
effvol <- array(0L, dim=c(ncol(data), ncol(data), iT))
for(k in 1:kmax){
effvol <- effvol + weights[k] * volk[[k]]
}
if(correlation){
corr <- array(0L, dim = c(ncol(data),ncol(data), iT))
#corr[,,1] <- cor(x[1:100, ])
for(i in 1:iT){
d <- sqrt(diag(effvol[,,i]))
d <- diag(d, ncol(effvol), ncol(effvol))
corr[,,i] <- inv(d) %*% effvol[,,i] %*% inv(d)
}
return(corr)
}
return(effvol)
}
#data get and preparation:
library(alphavantager)
av_api_key('0WXHEIY0O87LX4A3')
TLT <- as.data.frame(av_get(symbol = "TLT", av_fun = "TIME_SERIES_DAILY", outputsize = "full"))
rownames(TLT) <- TLT$timestamp
SPY <- as.data.frame(av_get(symbol = "SPY", av_fun = "TIME_SERIES_DAILY", outputsize = "full"))
rownames(SPY) <- SPY$timestamp
IAU <- as.data.frame(av_get(symbol = "IAU", av_fun = "TIME_SERIES_DAILY", outputsize = "full"))
rownames(IAU) <- IAU$timestamp
LQD <- as.data.frame(av_get(symbol = "LQD", av_fun = "TIME_SERIES_DAILY", outputsize = "full"))
rownames(LQD) <- LQD$timestamp
#Real estate
IYR <- as.data.frame(av_get(symbol = "IYR", av_fun = "TIME_SERIES_DAILY", outputsize = "full"))
rownames(LQD) <- IYR$timestamp
#returns
library(xts)
returns_TLT <- as.xts(diff(log(TLT[,4])), order.by = as.Date(TLT[,1], format='%d/%m/%Y')[-1])
returns_SPY <- as.xts(diff(log(SPY[,4])), order.by = as.Date(SPY[,1])[-1])
returns_IAU <- as.xts(diff(log(IAU[,4])), order.by = as.Date(IAU[,1])[-1])
returns_LQD <- as.xts(diff(log(LQD[,4])), order.by = as.Date(LQD[,1])[-1])
returns_IYR <- as.xts(diff(log(IYR[,4])), order.by = as.Date(IYR[,1])[-1])
#Sequencing them into proper time series.
returns_TLT <- returns_TLT[seq(from= as.Date('2010-01-02'), to = as.Date('2020-07-10'), by=1), ]
returns_SPY <- returns_SPY[seq(from= as.Date('2010-01-02'), to = as.Date('2020-07-10'), by=1), ]
returns_LQD <- returns_LQD[seq(from= as.Date('2010-01-02'), to = as.Date('2020-07-10'), by=1), ]
returns_IAU <- returns_IAU[seq(from= as.Date('2010-01-02'), to = as.Date('2020-07-10'), by=1), ]
returns_IYR <- returns_IYR[seq(from= as.Date('2010-01-02'), to = as.Date('2020-07-10'), by=1), ]
returns_collected <- cbind(returns_TLT, returns_SPY, returns_IAU, returns_LQD, returns_IYR)
#Analysis
asset_cov <- array(0L, dim =  c(5,5,length(returns_collected[,1])))
for(i in 1:length(returns_collected[,1])){
asset_cov[,,i] <- realCov(returns_collected[i,], F)
}
realcor_quarterly <- na.omit(rollapply(returns_collected, 60, function(x) cor(x), by.column = F, align = 'left'))
#they will always be different, since 2006 uses the average of 14 different ewmas.
ewma <- ewma.filter2006(returns_collected, T, 120, 1)
ewma1993 <- ewma.filter(returns_collected, 60, T) #60
#plot(ewma1993[2,1,], type ='l', col = 'red') + lines(ewma[2,1,])
arraycorrelation <- array(0L, dim = c(5,5,length(realcor_quarterly[,1])))
for(i in 1:length(realcor_quarterly[,1])){
arraycorrelation[,,i] <- realcor_quarterly[i,]
}
colnames(arraycorrelation) <- c('TLT', 'SPY', 'IAU', 'LQD', 'IYR')
rownames(arraycorrelation) <- c('TLT', 'SPY', 'IAU', 'LQD', 'IYR')
#check. It works!
cor(returns_collected[1:60,])
arraycorrelation[,,1]
library(ggplot2)
SMA <- data.frame(arraycorrelation[2,1,], arraycorrelation[3,1,], arraycorrelation[4,1,], arraycorrelation[5,1,],
arraycorrelation[3,2,], arraycorrelation[4,2,], arraycorrelation[5,2,], arraycorrelation[4,3,], arraycorrelation[5,3, ], arraycorrelation[5,4, ])
EWMA <- data.frame(ewma[2,1,], ewma[3,1,], ewma[4,1,], ewma[5,1,], ewma[3,2,], ewma[4,2,], ewma[5,2,], ewma[4,3,], ewma[5,3, ], ewma[5,4, ])
colnames(SMA) <- c('SPY/TLT', 'IAU/TLT', 'LQD/TLT', 'IAU/SPY', 'LQD/SPY', 'LQD/IAU')
p1 <- ggplot() + geom_line(aes(index(returns_collected[-c(1:59)]), SMA[,1], col='SMA: SPY/TLT')) +
ylab('Correlation') + xlab('Year') + geom_hline(aes(yintercept=0)) + geom_line(aes(index(returns_collected[-c(1:59)]), EWMA[-c(1:59),1], col='EWMA: SPY/TLT'))
p2 <- ggplot() + geom_line(aes(index(returns_collected[-c(1:59)]), SMA[,2], col='SMA: IAU/TLT')) +
ylab('Correlation') + xlab('Year') + geom_hline(aes(yintercept=0)) + geom_line(aes(index(returns_collected[-c(1:59)]), EWMA[-c(1:59),2], col='EWMA: IAU/TLT'))
p3 <- ggplot() + geom_line(aes(index(returns_collected[-c(1:59)]), SMA[,3], col='SMA: LQD/TLT')) +
ylab('Correlation') + xlab('Year') + geom_hline(aes(yintercept=0)) + geom_line(aes(index(returns_collected[-c(1:59)]), EWMA[-c(1:59),3], col='EWMA: LQD/TLT'))
p4 <- ggplot() + geom_line(aes(index(returns_collected[-c(1:59)]), SMA[,4], col='SMA: IYR/TLT')) +
ylab('Correlation') + xlab('Year') + geom_hline(aes(yintercept=0)) + geom_line(aes(index(returns_collected[-c(1:59)]), EWMA[-c(1:59),4], col='EWMA: IYR/TLT'))
p5 <- ggplot() + geom_line(aes(index(returns_collected[-c(1:59)]), SMA[,5], col='SMA: IAU/SPY')) +
ylab('Correlation') + xlab('Year') + geom_hline(aes(yintercept=0)) + geom_line(aes(index(returns_collected[-c(1:59)]), EWMA[-c(1:59),5], col='EWMA: IAU/SPY'))
p6 <- ggplot() + geom_line(aes(index(returns_collected[-c(1:59)]), SMA[,6], col='SMA: LQD/SPY')) +
ylab('Correlation') + xlab('Year') + geom_hline(aes(yintercept=0)) + geom_line(aes(index(returns_collected[-c(1:59)]), EWMA[-c(1:59),6], col='EWMA: LQD/SPY'))
p7 <- ggplot() + geom_line(aes(index(returns_collected[-c(1:59)]), SMA[,7], col='SMA: IYR/SPY')) +
ylab('Correlation') + xlab('Year') + geom_hline(aes(yintercept=0)) + geom_line(aes(index(returns_collected[-c(1:59)]), EWMA[-c(1:59),7], col='EWMA: IYR/SPY'))
p8 <- ggplot() + geom_line(aes(index(returns_collected[-c(1:59)]), SMA[,8], col='SMA: LQD/IAU')) +
ylab('Correlation') + xlab('Year') + geom_hline(aes(yintercept=0)) + geom_line(aes(index(returns_collected[-c(1:59)]), EWMA[-c(1:59),8], col='EWMA: LQD/IAU'))
p9 <- ggplot() + geom_line(aes(index(returns_collected[-c(1:59)]), SMA[,9], col='SMA: IYR/IAU')) +
ylab('Correlation') + xlab('Year') + geom_hline(aes(yintercept=0)) + geom_line(aes(index(returns_collected[-c(1:59)]), EWMA[-c(1:59),9], col='EWMA: IYR/IAU'))
p10 <- ggplot() + geom_line(aes(index(returns_collected[-c(1:59)]), SMA[,10], col='SMA: IYR/LQD')) +
ylab('Correlation') + xlab('Year') + geom_hline(aes(yintercept=0)) + geom_line(aes(index(returns_collected[-c(1:59)]), EWMA[-c(1:59),10], col='EWMA: IYR/LQD'))
library(gridExtra)
#grid.arrange(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10, ncol=1)
grid.arrange(p1,p2)
grid.arrange(p3,p4)
grid.arrange(p5,p6)
grid.arrange(p7,p8)
grid.arrange(p9,p10)
#storng correlation
grid.arrange(p3, p7)
#Recode the EWMA filter using RM-2005 with reference values. Then put it into the correlation graphs together with
#the simple moving average. Code IYR into the correlation parameter also.
#Code the eigenvalue decomposition method for verifying the fact that your covariance matrices satisfies regularity conditions.
#Remember that covariance matrix needs to satisfy positive semi-definiteness.
#for large covariance matrices, the matrix might become singular. If we have an N dim vector with M samples of the N dim vector, then
#when M<N the covariance matrix of this vector will become singular with M-N eigenvalues equal to zero.
#------------------------------------------------------------------------------------------------------------
library(ggplot2)
retplot <- ggplot() + geom_line(aes(index(returns_SPY),returns_SPY), col='steelblue') + xlab('Year') +
ylab('Returns') + ggtitle('Daily log returns for SPY') + theme(plot.title = element_text(hjust = 0.5))
#-------------ACF plot---------------------------------------
#logreturns:
bacf <- acf(returns_SPY, plot = FALSE)
bacfdf <- with(bacf, data.frame(lag, acf))
ciline <- qnorm((1 - 0.95)/2)/sqrt(length(returns_SPY))
#squared logreturns:
bacf2 <- acf(returns_SPY^2, plot = FALSE)
bacfdf2 <- with(bacf2, data.frame(lag, acf))
data2 <- data.frame(bacfdf, bacfdf2)
q <- ggplot(data = data2, mapping = aes(x = lag, y = acf)) + geom_hline(aes(yintercept = 0)) +
geom_hline(aes(yintercept = ciline),col = 'black', linetype = "dashed", size = 1) +
geom_hline(aes(yintercept = -ciline), col = 'black', linetype = "dashed", size = 1) +
geom_segment(aes(xend =lag, yend = 0),col = 'blue', size=1) + xlab('Lag') + ylab('ACF') +
geom_segment(aes(xend=lag, yend=0, y = bacfdf2[,2]), col = 'red', size = 1, alpha = 0.7, linetype = 'dashed') +
theme(legend.title = element_blank(), legend.position = c(0.8, 0.8), legend.background = element_rect(fill="lightblue",
size=0.5, linetype="solid", colour = 'darkblue'),
legend.text = element_text(colour="black", size=10, face="bold")) +
scale_color_manual(name = "Log-returns",values = c('blue'))
acf <- q + geom_point(aes(bacfdf[,1], bacfdf[,2]), col='blue') + geom_point(aes(bacfdf2[,1], bacfdf2[,2]), col='red')
acf
grid.arrange(retplot, acf, ncol=2)
acf(returns_SPY) + acf(returns_SPY^2)
grid.arrange(retplot, acf, ncol=2)
q <- ggplot(data = data2, mapping = aes(x = lag, y = acf)) + geom_hline(aes(yintercept = 0)) +
geom_hline(aes(yintercept = ciline),col = 'black', linetype = "dashed", size = 1) +
geom_hline(aes(yintercept = -ciline), col = 'black', linetype = "dashed", size = 1) +
geom_segment(aes(xend =lag, yend = 0, linetype = 'Log-returns'), col = 'red', size=1) + xlab('Lag') + ylab('ACF') +
geom_segment(aes(xend=lag, yend=0, y = bacfdf2[,2], linetype = 'Squared log-returns'), col = 'red', size = 1, alpha = 0.6) +
theme(legend.title = element_blank(), legend.position = c(0.8, 0.8), legend.background = element_rect(fill="lightblue",
size=0.5, linetype="solid", colour = 'darkblue'),
legend.text = element_text(colour="black", size=10, face="bold")) +
scale_fill_manual(name ='', values = c("blue", "red"))
acf <- q + geom_point(aes(bacfdf[,1], bacfdf[,2]), col='black') + geom_point(aes(bacfdf2[,1], bacfdf2[,2]), col='red')
acf
grid.arrange(retplot, acf, ncol=2)
library(ggplot2)
retplot <- ggplot() + geom_line(aes(index(returns_SPY),returns_SPY), col='steelblue') + xlab('Year') +
ylab('Returns') + theme(plot.title = element_text(hjust = 0.5))
#-------------ACF plot---------------------------------------
#logreturns:
bacf <- acf(returns_SPY, plot = FALSE)
bacfdf <- with(bacf, data.frame(lag, acf))
ciline <- qnorm((1 - 0.95)/2)/sqrt(length(returns_SPY))
#squared logreturns:
bacf2 <- acf(returns_SPY^2, plot = FALSE)
bacfdf2 <- with(bacf2, data.frame(lag, acf))
data2 <- data.frame(bacfdf, bacfdf2)
q <- ggplot(data = data2, mapping = aes(x = lag, y = acf)) + geom_hline(aes(yintercept = 0)) +
geom_hline(aes(yintercept = ciline),col = 'black', linetype = "dashed", size = 1) +
geom_hline(aes(yintercept = -ciline), col = 'black', linetype = "dashed", size = 1) +
geom_segment(aes(xend =lag, yend = 0, linetype = 'Log-returns'), col = 'red', size=1) + xlab('Lag') + ylab('ACF') +
geom_segment(aes(xend=lag, yend=0, y = bacfdf2[,2], linetype = 'Squared log-returns'), col = 'red', size = 1, alpha = 0.6) +
theme(legend.title = element_blank(), legend.position = c(0.8, 0.8), legend.background = element_rect(fill="lightblue",
size=0.5, linetype="solid", colour = 'darkblue'),
legend.text = element_text(colour="black", size=10, face="bold")) +
scale_fill_manual(name ='', values = c("blue", "red"))
acf <- q + geom_point(aes(bacfdf[,1], bacfdf[,2]), col='black') + geom_point(aes(bacfdf2[,1], bacfdf2[,2]), col='red')
acf
grid.arrange(retplot, acf, ncol=2)
